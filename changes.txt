TODO:
Interpreter, testing equivalences for all inputs.
Generator with/without lambda-lifting.
True pretty-printer.
If there is no lambda lifting, then SLL canonical program.
As more tests/checks as possible.
Good reports.

14-06-2011
----------
Common supercompilation patterns are extracted into machinery.scala
Some examples use new techniques now.

29-05-2011
----------
Generalizing how language is defined.
Starting patterns of supercompilation.

22-05-2011
----------
Starting reports: from simple (a few results) to complex (many results).
More interesting generalization combinators.
Interpreter (for testing/checking the correctness of transformations)
Initial checker, that generates a set of test inputs and checks that results are the same.

21-05-2011
----------
Polishing sll-generalization: preventing from generalizations like
	let x = v, ... in e iff 
		1. v is a variable and 
		2. x is used once in e
		
Starting whistle algebra.

16-05-2011
----------
Generalization fixed (part of substitution was lost sometimes)

11-05-2011
----------
An attempt of extracting of general semantics into middleware.scala

10-05-2011
----------
Working examples of how to compose SLL scp component in 
multi-samples.scala and single-samples.scala


08-05-2011
----------
Machinery: decomposed into traits.

06-05-2011
----------
Builders: small improvements + literate documentation.

05-05-2011
----------
Clear names in graphs.scala (conf, driveInfo, extraInfo). Documenting graphs.scala
Literate documentations for modeling of "abstract application".

03-05-2011
----------
Edges are labeled with driving information, nodes are labeled with extra information.
Huge code refactoring was done. The implementation should be polished and improved.
Documentation should be updated.
